/*
 * SimpleMazeGame.java
 * Copyright (c) 2008, Drexel University.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Drexel University nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY DREXEL UNIVERSITY ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL DREXEL UNIVERSITY BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package maze;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Scanner;

import maze.ui.MazeViewer;

/**
 * 
 * @author Sunny
 * @version 1.0
 * @since 1.0
 */
public class SimpleMazeGame
{
	/**
	 * Creates a small maze.
	 */
	public static HashMap<Integer,String[]> roomMap = new HashMap<Integer,String[]>();
	public static HashMap<Integer,String[]> doorMap = new HashMap<Integer,String[]>();
	public static ArrayList<Room> roomList = new ArrayList<Room>();
	public static ArrayList<Door> doorList = new ArrayList<Door>();
	
	public static Maze createMaze()
	{
		
		Maze maze = new Maze();
		Room r0 = new Room(0);
		Room r1 = new Room(1);
		Door d0 = new Door(r0,r1);
		
		r0.setSide(Direction.North, new Wall());
		r0.setSide(Direction.South, new Wall());
		r0.setSide(Direction.East, d0);
		r0.setSide(Direction.West, new Wall());
		
		r1.setSide(Direction.North, new Wall());
		r1.setSide(Direction.South, new Wall());
		r1.setSide(Direction.East, new Wall());
		r1.setSide(Direction.West, d0);
		
		maze.addRoom(r0);
		maze.addRoom(r1);
		maze.setCurrentRoom(0);
		//System.out.println("The maze does not have any rooms yet!");
		return maze;
		

	}
	
	public static void parser(String file) throws FileNotFoundException
	{
		
		Scanner in = new Scanner(new FileReader(file));
		int doorCount = 0;
		while(in.hasNextLine())
		{
			String line[] = in.nextLine().split(" ");
			if(line[0].equals("room"))
			{
				String sides[] = Arrays.copyOfRange(line, 2, 6);  
				roomMap.put(Integer.parseInt(line[1]), sides);
			}
			else if (line[0].equals("door"))
			{
				String rooms[] = Arrays.copyOfRange(line, 2, 4);  
				doorMap.put(doorCount, rooms);
				doorCount++;
			}
		}
		
	}
	public static Maze testing()
	{
		Maze maze = new Maze();
		ArrayList<RoomSide> doorListing = new ArrayList<RoomSide>();
		Direction dir[] = {Direction.North, Direction.South, Direction.East, Direction.West};
		for(int i : roomMap.keySet())
		{
			Room newRoom = new Room(i);
			int dr = 0;
			for(String s : roomMap.get(i))
			{
				if(s.equals("wall"))
				{
					newRoom.setSide(dir[dr], new Wall());
				}
				else if(s.contains("d"))
				{
					String doorNum[] = s.split("(?!^)");
					RoomSide roomD = new RoomSide(i,dir[dr], Integer.parseInt(doorNum[1]));
					doorListing.add(roomD);
				}
				
				dr++;
			}
			roomList.add(newRoom);
		}
			
		for(int i : doorMap.keySet())
		{
			int rm1 = Integer.parseInt(doorMap.get(i)[0]);
			int rm2 = Integer.parseInt(doorMap.get(i)[1]);
			Door newDoor = new Door(roomList.get(rm1), roomList.get(rm2));
			doorList.add(newDoor);			
		}
		
		for(RoomSide rs : doorListing)
		{
			roomList.get(rs.getRoom()).setSide(rs.getSide(), doorList.get(rs.getDoor()));
		}
		
		for(Room r: roomList)
		{
			maze.addRoom(r);
		}
		maze.setCurrentRoom(1);
		
		return maze;
	}

	public static Maze loadMaze(final String path) throws FileNotFoundException
	{
		Maze maze = new Maze();
		//System.out.println("Please load a maze from the file!");
		
		return maze;
	}

	public static void main(String[] args) throws FileNotFoundException
	{
		parser("C:\\Users\\dave-tigre\\Documents\\Git\\DrexelCS\\CS350\\Labs\\Lab2\\lab1\\large.maze");
		Maze maze = testing();	
	    MazeViewer viewer = new MazeViewer(maze);
	    viewer.run();
	}
}
class RoomSide {
	private int room;
	private Direction side;
	private int door;
	public RoomSide(int room, Direction side, int door)
	{
		this.room = room;
		this.side = side;
		this.door = door;
	}
	
	public int getRoom() {return room;}
	public Direction getSide() {return side;}
	public int getDoor() {return door;}
}
